module half_adder (
    input a, b,
    output sum, carry
);
    assign sum = a ^ b;
    assign carry = a & b;
endmodule

module full_adder (
    input a, b, cin,
    output sum, carry
);
    assign sum = a ^ b ^ cin;
    assign carry = (a & b) | (b & cin) | (a & cin);
endmodule

module array_multiplier_4bit (
    input [3:0] A,   // 4-bit multiplicand
    input [3:0] B,   // 4-bit multiplier
    output [7:0] P   // 8-bit product
);
    wire [3:0] pp0, pp1, pp2, pp3; // Partial products
    wire s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
    wire c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12;

    // **Generating Partial Products using 16 AND gates**
    and g1 (pp0[0], A[0], B[0]);
    and g2 (pp0[1], A[1], B[0]);
    and g3 (pp0[2], A[2], B[0]);
    and g4 (pp0[3], A[3], B[0]);

    and g5 (pp1[0], A[0], B[1]);
    and g6 (pp1[1], A[1], B[1]);
    and g7 (pp1[2], A[2], B[1]);
    and g8 (pp1[3], A[3], B[1]);

    and g9  (pp2[0], A[0], B[2]);
    and g10 (pp2[1], A[1], B[2]);
    and g11 (pp2[2], A[2], B[2]);
    and g12 (pp2[3], A[3], B[2]);

    and g13 (pp3[0], A[0], B[3]);
    and g14 (pp3[1], A[1], B[3]);
    and g15 (pp3[2], A[2], B[3]);
    and g16 (pp3[3], A[3], B[3]);

    // **First Row Addition**
    half_adder ha1 (pp0[1], pp1[0], s1, c1);
    full_adder fa1 (pp0[2], pp1[1], pp2[0], s2, c2);
    full_adder fa2 (pp0[3], pp1[2], pp2[1], s3, c3);
    full_adder fa3 (pp1[3], pp2[2], pp3[1], s4, c4);
    
    // **Second Row Addition**
    half_adder ha2 (s2, pp3[0], s5, c5);
    full_adder fa4 (s3, pp2[3], c2, s6, c6);
    full_adder fa5 (s4, pp3[2], c3, s7, c7);
    full_adder fa6 (pp3[3], c4, 1'b0, s8, c8);

    // **Final Addition**
    half_adder ha3 (s5, c1, s9, c9);
    full_adder fa7 (s6, c5, c9, s10, c10);
    full_adder fa8 (s7, c6, c10, s11, c11);
    full_adder fa9 (s8, c7, c11, s12, c12);

    // **Assigning Output**
    assign P[0] = pp0[0];
    assign P[1] = s1;
    assign P[2] = s9;
    assign P[3] = s10;
    assign P[4] = s11;
    assign P[5] = s12;
    assign P[6] = c8;
    assign P[7] = c12;

endmodule