module array_multiplier_4bit (
    input [3:0] A,   // 4-bit multiplicand
    input [3:0] B,   // 4-bit multiplier
    output [7:0] P   // 8-bit product
);
    wire [3:0] pp0, pp1, pp2, pp3; // Partial products
    wire [5:0] sum1, sum2, sum3;
    wire [2:0] carry1, carry2, carry3;
    
    // Generate Partial Products using 16 AND gates
    assign pp0 = A & {4{B[0]}};
    assign pp1 = A & {4{B[1]}};
    assign pp2 = A & {4{B[2]}};
    assign pp3 = A & {4{B[3]}};

    // First Stage Addition
    assign {carry1[0], sum1[2:0]} = pp0[3:1] + pp1[2:0]; 
    assign sum1[3] = pp1[3];
    
    // Second Stage Addition
    assign {carry2[0], sum2[2:0]} = sum1[3:1] + pp2[2:0] + carry1[0]; 
    assign sum2[3] = pp2[3];
    
    // Third Stage Addition
    assign {carry3[0], sum3[2:0]} = sum2[3:1] + pp3[2:0] + carry2[0];
    assign sum3[3] = pp3[3];

    // Final Product Assignment
    assign P[0] = pp0[0];
    assign P[1] = sum1[0];
    assign P[2] = sum1[1];
    assign P[3] = sum2[0];
    assign P[4] = sum2[1];
    assign P[5] = sum3[0];
    assign P[6] = sum3[1];
    assign P[7] = sum3[3] | carry3[0];  // Final carry addition

endmodule